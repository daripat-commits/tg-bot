# bot.py
import asyncio
import os
import logging
import socket
import ssl
import certifi
from typing import List, Tuple

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)
from aiogram.filters import CommandStart, Command
from aiogram.exceptions import TelegramBadRequest
from aiogram.client.session.aiohttp import AiohttpSession
from dotenv import load_dotenv

# ----------------- –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ -----------------
load_dotenv()
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
CHANNEL_URL = os.getenv("CHANNEL_URL", "https://t.me/")
FILE_PATH = os.getenv("FILE_PATH", "./material.pdf")
# –§–æ—Ä–º–∞—Ç: "–ù–∞–∑–≤–∞–Ω–∏–µ1|./path1;–ù–∞–∑–≤–∞–Ω–∏–µ2|./path2"
FILE_CHOICES_RAW = os.getenv("FILE_CHOICES", "")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ–Ω—é
COLS = 3                # –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
ROWS = 3                # —Å—Ç—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
PAGE_SIZE = COLS * ROWS

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–±–æ—Ç —Å–æ–∑–¥–∞–¥–∏–º –≤–Ω—É—Ç—Ä–∏ main)
bot: Bot | None = None
dp = Dispatcher()

# ----------------- –ø–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ -----------------
# –ü—Ä–∏–º–µ—Ä –≤ .env:
# FILE_CHOICES=–ú–∞—Ç–µ—Ä–∏–∞–ª|./material.pdf;–ß–µ–∫-–ª–∏—Å—Ç|./checklist.pdf;–ú–µ–¥–∏—Ç–∞—Ü–∏—è|./audio.mp3
FILE_CHOICES: List[Tuple[str, str]] = []
if FILE_CHOICES_RAW.strip():
    for chunk in FILE_CHOICES_RAW.split(";"):
        part = chunk.strip()
        if not part:
            continue
        if "|" in part:
            title, path = part.split("|", 1)
            FILE_CHOICES.append((title.strip(), path.strip()))
        else:
            FILE_CHOICES.append((part, part))

# –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π FILE_PATH
if not FILE_CHOICES:
    FILE_CHOICES = [("–ú–∞—Ç–µ—Ä–∏–∞–ª", FILE_PATH)]

# ----------------- –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã callback-–¥–∞–Ω–Ω—ã—Ö -----------------
CB_VIEW = "view"             # –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 0)
CB_PAGE = "page:"            # –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: page:{num}
CB_ITEM = "item:"            # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: item:{index}
CB_BACK_MAIN = "back_main"   # –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç–∫—Ä–∞–Ω—É —Å ¬´–°–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª

# ----------------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã -----------------
def make_main_kb() -> InlineKeyboardMarkup:
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
    kb = [
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")],
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_URL)],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def make_after_check_kb() -> InlineKeyboardMarkup:
    """–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ ¬´–°–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª."""
    kb = [
        [InlineKeyboardButton(text="üìö –°–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=CB_VIEW)],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def paginate_kb(items: List[Tuple[str, str]], page: int) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥, PAGE_SIZE –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É."""
    total = len(items)
    total_pages = max(1, (total + PAGE_SIZE - 1) // PAGE_SIZE)
    page = max(0, min(page, total_pages - 1))

    start = page * PAGE_SIZE
    end = min(start + PAGE_SIZE, total)
    slice_items = items[start:end]

    rows: List[List[InlineKeyboardButton]] = []
    # –º–∞—Ç–µ—Ä–∏–∞–ª-–∫–Ω–æ–ø–∫–∏ (–ø–æ COLS –≤ —Å—Ç—Ä–æ–∫–µ)
    row: List[InlineKeyboardButton] = []
    for idx_global in range(start, end):
        title, _path = items[idx_global]
        row.append(InlineKeyboardButton(text=title, callback_data=f"{CB_ITEM}{idx_global}"))
        if len(row) == COLS:
            rows.append(row)
            row = []
    if row:
        rows.append(row)

    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    nav_row: List[InlineKeyboardButton] = []

    prev_page = page - 1
    next_page = page + 1

    nav_row.append(
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if page > 0 else "‚óÄÔ∏è",
            callback_data=f"{CB_PAGE}{prev_page}" if page > 0 else "noop"
        )
    )
    nav_row.append(
        InlineKeyboardButton(
            text=f"–°—Ç—Ä. {page+1}/{total_pages}",
            callback_data="noop"
        )
    )
    nav_row.append(
        InlineKeyboardButton(
            text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è" if page < total_pages - 1 else "‚ñ∂Ô∏è",
            callback_data=f"{CB_PAGE}{next_page}" if page < total_pages - 1 else "noop"
        )
    )
    rows.append(nav_row)

    # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=CB_BACK_MAIN)])

    return InlineKeyboardMarkup(inline_keyboard=rows)

# ----------------- —É—Ç–∏–ª–∏—Ç—ã -----------------
async def is_subscribed(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–Ω–∞–ª–µ."""
    global bot
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        status = getattr(member, "status", None)
        logger.info(f"get_chat_member ‚Üí user_id={user_id}, status={status}")
        return status in {"member", "administrator", "creator"}
    except TelegramBadRequest as e:
        logger.error(f"get_chat_member error: {e}")
        return False

# ----------------- —Ö—ç–Ω–¥–ª–µ—Ä—ã -----------------
@dp.message(CommandStart())
async def on_start(message: Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –≤—ã–¥–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞.\n"
        "1) –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.\n"
        "2) –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–æ–ø–∫–∞ ¬´–°–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª."
    )
    await message.answer(text, reply_markup=make_main_kb())

@dp.message(Command("help"))
async def on_help(message: Message):
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª. –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–°–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª.\n"
        "–î–∞–ª—å—à–µ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –º–µ–Ω—é (–≤ 3 –∫–æ–ª–æ–Ω–∫–∏, —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü)."
    )

@dp.callback_query(F.data == "check_sub")
async def on_check_sub(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"[check_sub] from user_id={user_id}")
    if await is_subscribed(user_id):
        await callback.message.answer(
            "–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ\n–ù–∞–∂–º–∏—Ç–µ ¬´–°–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.",
            reply_markup=make_after_check_kb()
        )
        await callback.answer()
    else:
        # –ü—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –¥–∞—ë–º –∫–Ω–æ–ø–∫—É
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_URL)],
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏–ª, —è –ø–æ–¥–ø–∏—Å–∞–Ω ‚úÖ", callback_data="check_sub")],
            ]
        )
        await callback.message.answer(
            "–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.",
            reply_markup=kb,
        )
        await callback.answer()

# –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 0)
@dp.callback_query(F.data == CB_VIEW)
async def open_materials(callback: CallbackQuery):
    kb = paginate_kb(FILE_CHOICES, page=0)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:", reply_markup=kb)
    await callback.answer()

# –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
@dp.callback_query(F.data.startswith(CB_PAGE))
async def change_page(callback: CallbackQuery):
    data = callback.data
    try:
        page = int(data.removeprefix(CB_PAGE))
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", show_alert=True)
        return
    kb = paginate_kb(FILE_CHOICES, page=page)
    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=kb)
    except Exception:
        # –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:", reply_markup=kb)
    await callback.answer()

# –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç–∫—Ä–∞–Ω—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
@dp.callback_query(F.data == CB_BACK_MAIN)
async def back_main(callback: CallbackQuery):
    await callback.message.answer(
        "–ì–æ—Ç–æ–≤–æ. –ù–∞–∂–º–∏—Ç–µ ¬´–°–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.",
        reply_markup=make_after_check_kb()
    )
    await callback.answer()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
@dp.callback_query(F.data.startswith(CB_ITEM))
async def send_selected(callback: CallbackQuery):
    data = callback.data
    try:
        idx = int(data.removeprefix(CB_ITEM))
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
        return

    if not (0 <= idx < len(FILE_CHOICES)):
        await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    title, path = FILE_CHOICES[idx]
    if os.path.exists(path):
        try:
            doc = FSInputFile(path)
            await callback.message.answer_document(document=doc, caption=title)
            await callback.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
            logger.info(f"–í—ã–±—Ä–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {path}")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {path}: {e}")
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
            await callback.answer()
    else:
        await callback.message.answer(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        await callback.answer()

# –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
@dp.message(Command("sendfile"))
async def sendfile(message: Message):
    title, path = FILE_CHOICES[0]
    if os.path.exists(path):
        doc = FSInputFile(path)
        await message.answer_document(document=doc, caption=title)
    else:
        await message.answer(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")

# ----------------- —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ -----------------
async def main():
    global bot

    # SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –±–∞–∑–µ certifi (–∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ Windows)
    ssl_ctx = ssl.create_default_context(cafile=certifi.where())

    # –°–æ–∑–¥–∞—ë–º AiohttpSession –∏ –∑–∞–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ _connector_init
    session = AiohttpSession()
    session._connector_init = {
        "family": socket.AF_INET,  # —Ñ–æ—Ä—Å–∏—Ä—É–µ–º IPv4
        "ttl_dns_cache": 300,
        "ssl": ssl_ctx,            # –∏—Å–ø–æ–ª—å–∑—É–µ–º certifi CA bundle
    }
    # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏:
    # PROXY_URL = os.getenv("PROXY_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: "socks5://user:pass@host:port"
    # session.proxy = PROXY_URL

    bot = Bot(BOT_TOKEN, session=session)

    logger.info("Bot is running...")
    logger.info(f"CHANNEL_ID={CHANNEL_ID} | CHANNEL_URL={CHANNEL_URL} | FILE_PATH={FILE_PATH}")
    if FILE_CHOICES:
        logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã: " + " | ".join([f"{t} -> {p}" for t, p in FILE_CHOICES]))

    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


if __name__ == "__main__":
    asyncio.run(main())
