# bot.py
import asyncio
import os
import logging
import socket
import ssl
import certifi

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)
from aiogram.filters import CommandStart, Command
from aiogram.exceptions import TelegramBadRequest
from aiogram.client.session.aiohttp import AiohttpSession
from dotenv import load_dotenv

# ----------------- –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ -----------------
load_dotenv()
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
CHANNEL_URL = os.getenv("CHANNEL_URL", "https://t.me/")
FILE_PATH = os.getenv("FILE_PATH", "./material.pdf")
# –§–æ—Ä–º–∞—Ç: "–ù–∞–∑–≤–∞–Ω–∏–µ1|./path1;–ù–∞–∑–≤–∞–Ω–∏–µ2|./path2"
FILE_CHOICES_RAW = os.getenv("FILE_CHOICES", "")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–±–æ—Ç —Å–æ–∑–¥–∞–¥–∏–º –≤–Ω—É—Ç—Ä–∏ main)
bot: Bot | None = None
dp = Dispatcher()

# ----------------- –ø–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ -----------------
# –ü—Ä–∏–º–µ—Ä –≤ .env:
# FILE_CHOICES=–ú–∞—Ç–µ—Ä–∏–∞–ª|./material.pdf;–ß–µ–∫-–ª–∏—Å—Ç|./checklist.pdf;–ú–µ–¥–∏—Ç–∞—Ü–∏—è|./audio.mp3
FILE_CHOICES: list[tuple[str, str]] = []
if FILE_CHOICES_RAW.strip():
    for chunk in FILE_CHOICES_RAW.split(";"):
        part = chunk.strip()
        if not part:
            continue
        if "|" in part:
            title, path = part.split("|", 1)
            FILE_CHOICES.append((title.strip(), path.strip()))
        else:
            FILE_CHOICES.append((part, part))

# –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π FILE_PATH
if not FILE_CHOICES:
    FILE_CHOICES = [("–ú–∞—Ç–µ—Ä–∏–∞–ª", FILE_PATH)]

SEND_PREFIX = "send:"


# ----------------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã -----------------
def make_main_kb() -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")],
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_URL)],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


# ----------------- —É—Ç–∏–ª–∏—Ç—ã -----------------
async def is_subscribed(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–Ω–∞–ª–µ."""
    global bot
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        status = getattr(member, "status", None)
        logger.info(f"get_chat_member ‚Üí user_id={user_id}, status={status}")
        return status in {"member", "administrator", "creator"}
    except TelegramBadRequest as e:
        logger.error(f"get_chat_member error: {e}")
        return False


# ----------------- —Ö—ç–Ω–¥–ª–µ—Ä—ã -----------------
@dp.message(CommandStart())
async def on_start(message: Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –≤—ã–¥–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞.\n"
        "1) –ù–∞–∂–º–∏—Ç–µ ‚Äò–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É‚Äô.\n"
        "2) –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π —Ñ–∞–π–ª —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å."
    )
    await message.answer(text, reply_markup=make_main_kb())


@dp.message(Command("help"))
async def on_help(message: Message):
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª. –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
        "–ï—Å–ª–∏ –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã ‚Äî –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–Ω–æ–≤–∞."
    )


@dp.callback_query(F.data == "check_sub")
async def on_check_sub(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"[check_sub] from user_id={user_id}")
    if await is_subscribed(user_id):
        # –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
        if len(FILE_CHOICES) > 1:
            kb_rows = []
            for idx, (title, _path) in enumerate(FILE_CHOICES):
                kb_rows.append([InlineKeyboardButton(text=title, callback_data=f"{SEND_PREFIX}{idx}")])
            kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)
            await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:", reply_markup=kb)
            await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")
            return

        # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        title, path = FILE_CHOICES[0]
        if os.path.exists(path):
            try:
                doc = FSInputFile(path)
                await callback.message.answer_document(document=doc, caption=title)
                await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")
                logger.info(f"–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {path}")
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
                await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –ü–æ—Å–º–æ—Ç—Ä–∏ –ª–æ–≥–∏ –∫–æ–Ω—Å–æ–ª–∏.")
                await callback.answer()
        else:
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
            await callback.message.answer(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
            await callback.answer()
    else:
        # –ü—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –¥–∞—ë–º –∫–Ω–æ–ø–∫—É
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_URL)],
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏–ª, —è –ø–æ–¥–ø–∏—Å–∞–Ω ‚úÖ", callback_data="check_sub")],
            ]
        )
        await callback.message.answer(
            "–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.",
            reply_markup=kb,
        )
        await callback.answer()


@dp.callback_query(F.data.startswith(SEND_PREFIX))
async def send_selected(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –º–µ–Ω—é."""
    data = callback.data
    try:
        idx = int(data.removeprefix(SEND_PREFIX))
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
        return

    if not (0 <= idx < len(FILE_CHOICES)):
        await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    title, path = FILE_CHOICES[idx]
    if os.path.exists(path):
        try:
            doc = FSInputFile(path)
            await callback.message.answer_document(document=doc, caption=title)
            await callback.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
            logger.info(f"–í—ã–±—Ä–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {path}")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {path}: {e}")
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
            await callback.answer()
    else:
        await callback.message.answer(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        await callback.answer()


@dp.message(Command("sendfile"))
async def sendfile(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞."""
    title, path = FILE_CHOICES[0]
    if os.path.exists(path):
        doc = FSInputFile(path)
        await message.answer_document(document=doc, caption=title)
    else:
        await message.answer(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")


# ----------------- —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ -----------------
async def main():
    global bot

    # SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –±–∞–∑–µ certifi (—á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –∏–∑-–∑–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤)
    ssl_ctx = ssl.create_default_context(cafile=certifi.where())

    # –°–æ–∑–¥–∞—ë–º AiohttpSession –∏ –∑–∞–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ _connector_init
    session = AiohttpSession()
    session._connector_init = {
        "family": socket.AF_INET,  # —Ñ–æ—Ä—Å–∏—Ä—É–µ–º IPv4
        "ttl_dns_cache": 300,
        "ssl": ssl_ctx,            # –∏—Å–ø–æ–ª—å–∑—É–µ–º certifi CA bundle
    }
    # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏:
    # PROXY_URL = os.getenv("PROXY_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: "socks5://user:pass@host:port"
    # session.proxy = PROXY_URL

    bot = Bot(BOT_TOKEN, session=session)

    logger.info("Bot is running...")
    logger.info(f"CHANNEL_ID={CHANNEL_ID} | CHANNEL_URL={CHANNEL_URL} | FILE_PATH={FILE_PATH}")
    if FILE_CHOICES:
        logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã: " + " | ".join([f"{t} -> {p}" for t, p in FILE_CHOICES]))

    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


if __name__ == "__main__":
    asyncio.run(main())
